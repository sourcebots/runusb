#!/usr/bin/env python3

import argparse
import hashlib
import logging
import lzma
import pathlib
import subprocess
import tempfile
from typing import List, Sequence

UPDATE_FILENAME = 'update.tar.xz'
SB_DEBS = '/sb-debs'
SB_DEBS_PATH = pathlib.Path(SB_DEBS)
LOG_FILE = 'update.log'


def argument_parser():
    parser = argparse.ArgumentParser(
        description="Install updates from an LZMA archive of debian packages",
    )

    parser.add_argument(
        'path',
        help="path to directory containing the {}".format(UPDATE_FILENAME),
        action='store',
        type=pathlib.Path,
    )

    parser.add_argument(
        '--no-reboot',
        help="Don't reboot after installing updates (useful for debugging this script)",
        action='store_false',
        dest='reboot',
        default=True,
    )

    return parser


def rebuild_apt_repo():
    logging.debug("Rebuilding apt repo")

    with lzma.open(str(SB_DEBS_PATH / 'Packages.xz'), mode='wb') as packages_xz:
        # Note: we can't just pass the file through to the stdout of the
        # subprocess as that results in the underlying (i.e: non-compression
        # wrapped) file descriptor being passed to the subprocess.
        packages_xz.write(subprocess.check_output(
            ['dpkg-scanpackages', '.', '/dev/null'],
            cwd=SB_DEBS,
        ))


def check_output_with_log_on_error(
    command: Sequence[str],
    *,
    expected_returncode: int=0
) -> str:
    logging.debug("Running {!r}".format(command))
    try:
        output = subprocess.check_output(
            command,
            universal_newlines=True,
            stderr=subprocess.STDOUT,
        ).strip()  # type: str # (universal_newlines does the conversion for us)

        if expected_returncode != 0:
            raise subprocess.CalledProcessError(0, command, output)

        return output
    except subprocess.CalledProcessError as ex:
        if ex.returncode == expected_returncode:
            # Mypy thinks that ex.output is Any. Strictly ex.output is
            # Optional[str], however our use-cases mean that it's actually
            # always a str.
            return ex.output  # type: ignore

        logging.error("Command {!r} failed:\n{}".format(
            command,
            ex.output,
        ))
        raise


def update_and_upgrade():
    with tempfile.NamedTemporaryFile(
        suffix='.sourcebots.list',
        mode='w',
    ) as source_list:
        source_list.write('deb [trusted=yes] file:{} ./\n'.format(SB_DEBS))
        source_list.flush()

        # Tell apt-get to only consider the local repo we've put our updates into
        base_command = (
            'apt-get',
            '--option',
            'Dir::Etc::SourceParts=',
            '--option',
            'Dir::Etc::SourceList={}'.format(source_list.name),
        )

        logging.debug("Updating repo")
        check_output_with_log_on_error(base_command + ('update', '--yes'))

        upgrade_summary = check_output_with_log_on_error(
            base_command + ('upgrade', '--assume-no'),
            # Adding '--assume-no' causes an Abort exit, which has a non-zero
            # exit code. Unfortunately there doesn't seem to be an alternative
            # mechanism to list the available updates via apt-get.
            expected_returncode=1,
        )
        logging.debug(upgrade_summary)

        logging.debug("Performing update")
        check_output_with_log_on_error(base_command + ('upgrade', '--yes'))


def hash_file(path: pathlib.Path) -> str:
    return hashlib.sha1(path.read_bytes()).hexdigest()


def validate_deb(deb_path: pathlib.Path) -> None:
    """
    Validate that the given path is indeed a debian package.

    Raises ``ValueError`` if the package is not valid.
    """
    check_deb = subprocess.call(
        ['dpkg', '--info', str(deb_path)],
        stdout=subprocess.DEVNULL,
    )

    if check_deb != 0:
        raise ValueError("file {} is not a deb file!".format(deb_path))


def _extract_debs(
    update_file: pathlib.Path,
    working_dir: pathlib.Path,
) -> List[pathlib.Path]:

    subprocess.check_call(
        [
            'tar',
            '--extract',
            '--xz',
            '--file', str(update_file),
        ],
        cwd=str(working_dir),
    )

    return list(working_dir.glob("*.deb"))


def add_debs_to_local_repo_from(update_file: pathlib.Path) -> None:
    """
    Given the path to an xz-compressed tarball, copy any .deb files to the
    ``SB_DEBS`` directory.
    """

    with tempfile.TemporaryDirectory(prefix='updates-') as updates_dir:
        found_debs = _extract_debs(update_file, pathlib.Path(updates_dir))

        if not found_debs:
            raise FileNotFoundError(
                "Failed to find deb files in {}, exiting".format(update_file),
            )

        logging.debug("Found {} potential packages".format(len(found_debs)))

        # Check that all the debs are valid
        for deb_path in found_debs:
            validate_deb(deb_path)

        # Add all the debs to the repo directory.
        # Note that we do this _separately_ after the checking, so that we can
        # be somewhat confident that either all the debs that were in the
        # update are all in the repo or none are.
        for deb_path in found_debs:
            logging.debug("Adding {} to internal repo".format(deb_path.name))
            deb_path.rename(SB_DEBS_PATH / deb_path.name)


def main():
    options = argument_parser().parse_args()
    logging.basicConfig(
        level=logging.DEBUG,
        handlers=[
            logging.FileHandler(str(options.path / LOG_FILE)),
            logging.StreamHandler(),
        ],
    )
    try:
        update_file = options.path / UPDATE_FILENAME

        logging.info("Starting updates from {} ({})".format(
            update_file,
            hash_file(update_file),
        ))
        add_debs_to_local_repo_from(update_file)

        update_file.unlink()

        rebuild_apt_repo()
        update_and_upgrade()

        logging.info("Upgrade complete.")
        if options.reboot:
            logging.info("Rebooting...")
            subprocess.check_call(["reboot"])
    except Exception:
        logging.exception("Upgrade failed")
        raise


if __name__ == '__main__':
    main()
