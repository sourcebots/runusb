#!/usr/bin/env python3

import logging
import os
import select
import signal
import subprocess
from abc import ABCMeta, abstractmethod
from enum import Enum
from typing import Dict, Iterator, NamedTuple, Optional, Type  # noqa: F401

LOGGER = logging.getLogger('runusb')

PROC_FILE = '/proc/mounts'
ROBOT_FILE = 'main.py'
SPAWN_IMAGE = '/mnt/rootmirror'
MOUNTPOINT_DIR = '/media'  # the directory under which all USBs will be mounted
METADATA_FILENAME = 'metadata.json'


Mountpoint = NamedTuple('Mountpoint', [
    ('mountpoint', str),
    ('filesystem', str),
])


VERBOTEN_FILESYSTEMS = (
    'cgroup',
    'configfs',
    'debugfs',
    'devpts',
    'devtmpfs',
    'hugetlbfs',
    'mqueue',
    'proc',
    'sysfs',
)


class USBType(Enum):
    ROBOT = 'ROBOT'
    METADATA = 'METADATA'
    INVALID = 'INVALID'  # We dont care about this drive


def detect_usb_type(mountpoint: str) -> USBType:
    # subpaths of the root image are excluded
    if mountpoint.startswith(SPAWN_IMAGE):
        return USBType.INVALID

    # Check for the existence of the robot code
    if os.path.exists(os.path.join(mountpoint, ROBOT_FILE)):
        return USBType.ROBOT

    # Check for existence of a metadata file
    if os.path.exists(os.path.join(mountpoint, METADATA_FILENAME)):
        return USBType.METADATA

    return USBType.INVALID


class FSTabReader(object):
    def __init__(self) -> None:
        self.handle = open(PROC_FILE)

    def __enter__(self):
        self.handle.__enter__()
        return self

    def __exit__(self, *args, **kwargs):
        return self.handle.__exit__(*args, **kwargs)

    def close(self):
        self.handle.close()

    def read(self) -> Iterator[Mountpoint]:
        self.handle.seek(0)

        for line in self.handle:
            (_, mountpoint, filesystem, _, _, _) = line.split(' ')

            yield Mountpoint(
                mountpoint=mountpoint,
                filesystem=filesystem,
            )

    def watch(self, timeout=None):
        _, _, changed = select.select([], [], [self.handle], timeout)

        if changed:
            LOGGER.debug("Detected change in procfile")

        return bool(changed)


class USBHandler(metaclass=ABCMeta):
    @abstractmethod
    def __init__(self, mountpoint_path: str):
        pass

    @abstractmethod
    def close(self) -> None:
        pass


class RobotUSBHandler(USBHandler):
    def __init__(self, mountpoint_path: str):
        env = dict(os.environ)
        env["SBOT_METADATA_PATH"] = MOUNTPOINT_DIR
        self.process = subprocess.Popen(
            ["idfc"],
            stdin=subprocess.DEVNULL,
            cwd=mountpoint_path,
            env=env,
            start_new_session=True,  # Put the process in a new process group
        )

    def close(self) -> None:
        self._send_signal(signal.SIGTERM)
        try:
            self.process.communicate(timeout=5)
        except subprocess.TimeoutExpired:
            pass
        self._send_signal(signal.SIGKILL)
        self._reset_servo_board()

    def _send_signal(self, sig: int) -> None:
        if self.process.poll() is not None:
            # Process has already exited, so the kill() call would fail.
            return
        os.killpg(self.process.pid, sig)

    def _reset_servo_board(self) -> None:
        """
        Due to an outstanding bug in the SR servo board firmware
        (https://github.com/srobo/servo-v4-fw/issues/7),
        it crashes when 12V power is removed as the user code process exits,
        rendering its USB interface unusable until the microcontroller is reset.

        Unfortunately there is no way to reset the microcontroller remotely
        other than by power-cycling the power provided to it over USB. While a
        few USB hubs support power-cycling individual ports, neither the
        Raspberry Pi's internal hub nor the model of external hub we currently
        use support this, so the best we can do is to power-cycle all of the
        Raspberry Pi's ports at once. On the upside, it means we don't have to
        care whereabouts on the bus the servo board is connected.

        To be specific, the Raspberry Pi's internal hub does support some level
        of per-port switching but not enough to be useful to us: port 1 (which
        is connected to the builtin Ethernet controller) can be switched
        independently of ports 2 to 5 (the physical USB ports). Ports 2-5 are
        switched by telling uhubctl to operate on port 2; telling it to operate
        on ports 3, 4 or 5 has no effect. See the uhubctl README for more info:
        https://github.com/mvp/uhubctl
        """
        command = [
            "uhubctl",
            "--loc", "1-1",  # path to the hub to power cycle (this never changes)
            "--ports", "2",  # only switch ports 2-5
            "--action", "cycle",
            "--delay", "1",  # time to wait before powering back on
        ]
        LOGGER.info("power-cycling USB bus to reset servo board (srobo/servo-v4-fw#7)")
        try:
            subprocess.run(command, check=True)
        except BaseException:
            LOGGER.exception("failed to power-cycle USB bus")


class MetadataUSBHandler(USBHandler):
    def __init__(self, mountpoint_path: str):
        pass  # Nothing to do.

    def close(self) -> None:
        pass  # Nothing to do.


class AutorunProcessRegistry(object):
    TYPE_HANDLERS = {
        USBType.ROBOT: RobotUSBHandler,
        USBType.METADATA: MetadataUSBHandler,
    }  # type: Dict[USBType, Type[USBHandler]]

    def __init__(self) -> None:
        self.mountpoint_handlers = {}  # type: Dict[str, USBHandler]
        self.mountpoint_types = {}  # type: Dict[str, USBType]

    def update_filesystems(self, mountpoints: Iterator[Mountpoint]) -> None:
        actual_mountpoint_paths = {
            x.mountpoint
            for x in mountpoints
            if self._is_viable_mountpoint(x)
        }

        expected_mountpoint_paths = set(self.mountpoint_handlers.keys())

        # Handle newly detected filesystems
        for new_mountpoint_path in (
            actual_mountpoint_paths
            - expected_mountpoint_paths
        ):
            self._detect_new_mountpoint_path(new_mountpoint_path)

        # Handle now-dead filesystems
        for old_mountpoint_path in (
            expected_mountpoint_paths
            - actual_mountpoint_paths
        ):
            self._detect_dead_mountpoint_path(old_mountpoint_path)

    def _detect_new_mountpoint_path(self, path: str) -> None:
        LOGGER.info("Found new mountpoint: %s", path)
        usb_type = detect_usb_type(path)
        handler_class = self.TYPE_HANDLERS[usb_type]
        handler = handler_class(path)
        LOGGER.info("  -> launched handler")
        self.mountpoint_handlers[path] = handler
        self.mountpoint_types[path] = usb_type

    def _detect_dead_mountpoint_path(self, path: str) -> None:
        LOGGER.info("Lost mountpoint: %s", path)
        handler = self.mountpoint_handlers[path]
        handler.close()
        LOGGER.info("  -> closed handler")
        del self.mountpoint_handlers[path]
        del self.mountpoint_types[path]

    def _is_viable_mountpoint(self, mountpoint: Mountpoint) -> bool:
        # Drop restricted types
        if mountpoint.filesystem in VERBOTEN_FILESYSTEMS:
            LOGGER.debug(
                "Disregarding filesystem %s due to forbidden filesystem "
                "type %s",
                mountpoint.mountpoint,
                mountpoint.filesystem,
            )

            return False

        # Sanity: never consider the root filesystem
        if mountpoint.mountpoint == '/':
            return False

        # Defer to the declared filter by path
        return detect_usb_type(mountpoint.mountpoint) is not USBType.INVALID


def main():
    logging.basicConfig(level=logging.DEBUG)

    fstab_reader = FSTabReader()

    registry = AutorunProcessRegistry()

    # Initial pass (in case an autorun FS is already mounted)
    registry.update_filesystems(fstab_reader.read())

    try:
        while True:
            if fstab_reader.watch():
                registry.update_filesystems(fstab_reader.read())
    except KeyboardInterrupt:
        # Tell the registry that all filesystems were unmounted, which has the
        # effect of making it do cleanup.
        registry.update_filesystems([])  # type: ignore


if __name__ == '__main__':
    main()
